#include <iostream>
#include <fstream>
#include <iomanip>
#include <list>


/**************************************************************
Copyright(c) 2019 Angelo Coppi

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files(the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and / or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions :

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
********************************************************************/


void dumpfile(std::ofstream & ss, std::string & filebuff)
{
    std::string::size_type i,u,maxfile=filebuff.size();
    for(i=0; i<maxfile;)
    {
        for(u=0; u<16 && i<maxfile; u++,i++)
        {
            ss<<(unsigned short)filebuff[i]<<",";
        }
        ss<<std::endl;
    }
}


void create_array_from_file(std::string & in,std::string & out,
                            std::string & filebuff,size_t lenght, bool first)
{
    std::string outf=out+".cpp";
    std::ofstream ss;
    if(first==false)
        ss.open(outf);
    else
        ss.open(outf,std::ios_base::out|std::ios_base::app);
    if(ss.is_open())
    {
        if(first==false)
        {
            ss << "#include \"" << out << ".h\"" << std::endl;
            ss << "/**************************************************************" << std::endl;
            ss << "Copyright(c) 2019 Angelo Coppi" << std::endl;
            ss << "" << std::endl;
            ss << "Permission is hereby granted, free of charge, to any person" << std::endl;
            ss << "obtaining a copy of this software and associated documentation" << std::endl;
            ss << "files(the \"Software\"), to deal in the Software without" << std::endl;
            ss << "restriction, including without limitation the rights to use," << std::endl;
            ss << "copy, modify, merge, publish, distribute, sublicense, and / or sell" << std::endl;
            ss << "copies of the Software, and to permit persons to whom the" << std::endl;
            ss << "Software is furnished to do so, subject to the following" << std::endl;
            ss << "conditions :" << std::endl;
            ss << "" << std::endl;
            ss << "The above copyright notice and this permission notice shall be" << std::endl;
            ss << "included in all copies or substantial portions of the Software." << std::endl;
            ss << "" << std::endl;
            ss << "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND," << std::endl;
            ss << "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES" << std::endl;
            ss << "OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND" << std::endl;
            ss << "NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT" << std::endl;
            ss << "HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY," << std::endl;
            ss << "WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING" << std::endl;
            ss << "FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR" << std::endl;
            ss << "OTHER DEALINGS IN THE SOFTWARE." << std::endl;
            ss << "********************************************************************/" << std::endl;
            ss << "// DO NOT EDIT GENERATED BY CA_PACKED" << std::endl<< std::endl<< std::endl;
        }
        std::string arrayname=in;
        std::string::size_type  p=arrayname.rfind('/');
        if(p!=std::string::npos)
            arrayname.erase(0,p+1);
        p=arrayname.rfind('.');
        if(p!=std::string::npos)
            arrayname[p]='_';
        std::string aname=std::string("array_")+arrayname;
        ss<<"/// from file : "<<in<<std::endl;
        ss<<"static const char "<<aname<<"["<<lenght<<"]={"<<std::endl;
        dumpfile(ss,filebuff);
        ss<<"};"<<std::endl<<std::endl;
        ss<<"static const unsigned int "<<aname<<"_size="<<lenght<<";"<<std::endl;
        std::string oname=in;
        std::string::size_type s=oname.rfind('/');
        if(s!=-1)
            oname.erase(0,s+1);
        s=oname.rfind('.');
        if(s!=std::string::npos)
            oname[s]='_';
        ss<<std::endl<<std::endl<<"const char * packManager::getFile_"<<oname<<"(unsigned int  * len){"<<std::endl;
        ss<<"    *len="<<aname<<"_size;"<<std::endl;
        ss<<"    return "<<aname<<";"<<std::endl;
        ss<<"}"<<std::endl;
        ss.close();
    }
}


static void usage(void)
{
    std::cout<<"usage : packfile --out <path> <file to pack> <file to pack> ..."<<std::endl;
    exit(1);
}

int main ( int argc , const char *argv[])
{
    std::string fileout;
    std::list<std::string> allfiles;
    bool first_file=false;
    if(argc==1)
    {
        usage;
    }
    else
    {
        std::string opt=argv[1];
        if(opt!="--out")
        {
            usage();
        }
        else
        {
            if(argc>=2)
            {
                fileout=argv[2];
            }
            else
            {
                usage();
            }
        }
        if(argc>=3)
        {
            int i = 3;

            while (i < argc)
            {
                std::string name = argv[i];
                std::string filebuff;
                FILE *in = fopen(name.c_str(), "rb");
                if (in != nullptr)
                {
                    std::cout<<"Packing file : "<<name<<std::endl;
                    fseek(in, 0L, SEEK_END);
                    size_t lenght = ftell(in);
                    fseek(in, 0L, SEEK_SET);
                    if (lenght > 0)
                    {
                        char *buff = new char[lenght];
                        size_t max_size = fread(buff, sizeof(char), lenght, in);
                        if (max_size > 0)
                        {
                            filebuff.assign((const char *) buff,
                                            (std::string::size_type) max_size / sizeof(char));
                            create_array_from_file(name, fileout, filebuff,lenght,first_file);
                            if(!first_file)first_file=true;
                            allfiles.push_back(name);

                        }
                    }
                    fclose(in);
                }
                i++;
            }
            if(!allfiles.empty())
            {
                auto it=allfiles.begin();
                auto _end=allfiles.end();
                std::ofstream ss;
                std::string fout=fileout+".h";
                ss.open(fout,std::ios_base::out);
                ss<<"#ifndef PACK_MANAGER_HEADER_"<<fileout<<std::endl;
                ss<<"#define PACK_MANAGER_HEADER_"<<fileout<<std::endl<<std::endl<<std::endl;
                ss<<"class packManager"<<std::endl;
                ss<<"{"<<std::endl;
                ss<<"public:"<<std::endl;
                if(ss.is_open())
                {
                    while (it != _end)
                    {
                        std::string arrayname = *it;
                        std::string::size_type p = arrayname.rfind('/');
                        if(p!=std::string::npos)
                            arrayname.erase(0, p + 1);
                        p = arrayname.rfind('.');
                        if (p !=std::string::npos)
                            arrayname[p] = '_';
                        ss << "//"<<std::endl;
                        ss << "static const char *getFile_" << arrayname
                           << "(unsigned int  * len);" << std::endl;
                        it++;

                    }
                    ss<<"};"<<std::endl<<std::endl<<std::endl<<std::endl;
                    ss<<"#endif"<<std::endl<<std::endl<<std::endl;
                    ss.close();
                }
                else
                {
                    std::cout<<"Fail to open : "<<fileout<<std::endl;
                }
            }
            else
            {
                std::cout<<" no files packed"<<std::endl;
            }
        }
    }
    return 0;
}
